---
title: Lecture 2
subtitle: Getting Started with Quarto
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2025-01-27
execute: 
  eval: true
  echo: true
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---


```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```


# Getting Started with Quarto {background-color="#1c4982"}


## Building a Personal Website on GitHub

- Follow steps described in [Classwork 1](https://bcdanl.github.io/320/danl-cw/danl-320-cw-01.html).


## Let's Practice Markdown!

- Jupyter Notebook, Quarto, and GitHub-based Discussion Boards use **markdown** as its underlying document syntax.

- Let's do [Classwork 2](https://bcdanl.github.io/320/danl-cw/danl-320-cw-02.html).


## Getting Started with Quarto
### YAML


:::: {.columns}
::: {.column width="25%"}
![](https://bcdanl.github.io/lec_figs/quarto-yml-engine.jpg){width="75%"}
:::


::: {.column width="70%"}

:::{}
- An YAML (yet another markup language) header surrounded by `---`.
  - It is commonly used for document configuration (e.g., title, author, date, style, ...).

- Chunks of Python/R code surrounded by three backticks, $\text{```}$.

:::

:::
::::



## Getting Started with Quarto
### Knitting / Rendering

- When we knit the document, Quarto sends the `.qmd` file to **jupyter**/**knitr**, which executes all of the code chunks and creates a new markdown (`.md`) document which includes the code and its output. 

- The markdown file (`*.md`) generated by **jupyter**/**knitr** is then processed by **pandoc**, which is responsible for creating the output file.

![](https://bcdanl.github.io/lec_figs/quarto-flow.png)





## Getting Started with Quarto
### Markdown, Quarto, and HTML

- The very original version of **Markdown** was invented mainly to write HTML content more easily.
  - For example, `- SOME_TEXT` in "*.md" is equivalent to `<ul><li> SOME_TEXT </li>` in "*.html"
  
  
- Pandoc makes it possible to convert a Markdown document to a large variety of output formats, such as HTML.



## Getting Started with Quarto and HTML
### Markdown, Quarto, and HTML


```{.bash}
---
title: "Habits"
author: YOUR_NAME
date: January 30, 2024
format: 
  html
---
```




- To create an HTML document from Quarto, we specify the `html` output format in the YAML metadata of our document.
  - By default, `format: html` is set.

- In RStudio, we can create a new Quarto file from the menu, File -> New File -> Quarto Document.

- Open an empty Quarto file.
  - Type the following YAML metadata to the empty Quarto file.





## Getting Started with Quarto
### Quarto Basics


- In RStudio, close the project `USERNAME.github.io.Rporj` if it is on.
  1. Click `USERNAME.github.io.Rporj` at the top-right corner.
  2. Click *Close Project*.
  

- Download the Quarto file, `danl-320-quarto-r.qmd` from Brightspace, and open it from RStudio.




## Getting Started with Quarto
### Quarto Basics

```{.bash}
---
title: 
subtitle: 
author: 
date: last-modified

format: 
  html:
  
execute: 
  echo: true
  eval: true
---
```



- The following syntax is part of YAML metadata in `danl-320-quarto-r.qmd`.
  - In YAML, indentation really matters!
  - **tab** (or four spaces) defines a level in YAML.


# Managing a Website with Quarto (and Jupyter Notebook) {background-color="#1c4982"}

## Quarto Websites


- In RStudio, open the project `USERNAME.github.io.Rporj`.
  1. Click `Project: (None)` at the top-right corner.
  2. Click `USERNAME.github.io.Rporj`.


- Your website has a `_quarto.yml` configuration file.
  - This file provides options for HTML documents within the website.


:::: {.columns}
::: {.column width="50%"}
```{.bash}
---
project:
  type: website

website:
  title: "YOUR NAME"
  navbar:
    left:
      - text: Project
        href: project.qmd
      - text: Blog
        href: blog-listing.qmd
```

:::

::: {.column width="50%"}

```{.bash}
format:
  html:
    theme: cosmo
    css: styles.css
    toc: false
---
```

- The `_quarto.yml` file configures the website settings.

- Indentation matters!

:::

::::



## Quarto Websites
### Custom CSS

- Cascading Style Sheets (CSS) is used to format the layout of a webpage (color, font, text size, background, display, etc.). 

  - HTML will format the architecture of the house.
  
  - CSS will be the carpet and walls to decorate the house.
  
  - JavaScript adds interactive elements in the house, such as opening doors and lighting.

  
- We are not front-end web developers. 

  - We will not cover the use of CSS and JavaScript.



## Quarto Websites
### Rendering

- The **Render** button (**command/Ctrl + shift + K**) renders a single Quarto file.

- `quarto render` from Terminal renders all Quarto/Jupyter Notebook files in your local working directory:

```{.bash}
quarto render
```

- We should use `quarto render` when we have changes in `_quarto.yml`.

- Make changes only from your local laptop. 
  - Do not make any change from the GitHub repo webpage.




## Quarto Websites
### Adding `*.ipynb` to Quarto websites


- By default, `quarto render` doesnâ€™t execute any code in `.ipynb` notebooks. 

- `quarto render` renders `.ipynb` notebooks, so that corresponding `html` files are rendered. 

  - If we need to update cell outputs in `*.ipynb`, run that `*.ipynb` on Google Colab, and save the notebook.




## Quarto Websites
### Appearance and Style

- `theme` specifies the Bootstrap theme to use for the page (themes are drawn from the [Bootswatch](https://bootswatch.com) theme library).
  - Valid themes include `default`, `bootstrap`, `cerulean`, `cosmo`, `darkly`, `flatly`, `journal`, `lumen`, `paper`, `readable`, `sandstone`, `simplex`, `spacelab`, `united`, and `yeti`. 

  
- `highlight-style` specifies the code highlighting style. 
  - Supported styles include `default`, `tango`, `pygments`, `kate`, `monochrome`, `espresso`, `zenburn`, `haddock`, `breezedark`, and `textmate`. 



## Quarto Websites
### About

- Your `index.qmd` sets a page about you.
  - Details in about pages are available here:
  - [https://quarto.org/docs/websites/website-about.html](https://quarto.org/docs/websites/website-about.html).


- Quarto includes 5 built in templates:
  - `jolla`
  - `trestles`
  - `solana`
  - `marquee`
  - `broadside`



## Quarto Websites
### Icons and Emojis

- A ton of Bootstrap icons are available here:
  - [https://icons.getbootstrap.com](https://icons.getbootstrap.com).


- A ton of markdown emojis are available here `r emo::ji('smile')`:
  - [https://github.com/ikatyang/emoji-cheat-sheet](https://github.com/ikatyang/emoji-cheat-sheet)
  - [https://gist.github.com/rxaviers/7360908](https://gist.github.com/rxaviers/7360908)




## Quarto Websites
### Naviation and Adding Pages

- We can add a new page to the website through `navbar` in `_quarto.yml`

```{.bash}
left:
- text: Project
  href: project.qmd
- text: Blog
  href: blog-listing.qmd
- text: Homeowrk
  href: hw.qmd
```




## Quarto Websites
### Naviation and Adding Pages

- We can also create a navigation bar menu by including a `menu`

```{.bash}
left:
  - text: "Projects"
    menu:
      - project_1.qmd
      - project_2.qmd 
```


- More details about navbar are available here:
  - [https://quarto.org/docs/websites/website-navigation.html](https://quarto.org/docs/websites/website-navigation.html)




## Quarto Websites  {background-color="#6497b1"}
### Colors


- A ton of hex codes for colors are available here:
  - [https://www.color-hex.com](https://www.color-hex.com)




## Quarto Website Basics

- Let's do [Classwork 3](https://bcdanl.github.io/320/danl-cw/danl-320-cw-03.html).




