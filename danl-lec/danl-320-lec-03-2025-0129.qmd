---
title: Lecture 3
subtitle: Python Basics
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2025-01-29
execute: 
  eval: true
  echo: true
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---


```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```



# Python Basics {background-color="#1c4982"}


## Python Basics
###  Variables Are Names, Not Places

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/py-basic-box.png">
</p>

- A **value** is datum (literal) such as a number or text. 

- There are different types of values: 
  - 352.3 is known as a float or double;
  - 22 is an integer;
  - "Hello World!" is a string.

## Python Basics
###  Values, Variables, and Types

```{.python}
a = 10
print(a)
```


:::: {.columns}

::: {.column width="50%"}

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/int-py-fig2-3.png" width="400">
</p>

:::

::: {.column width="50%"}


- A **variable** is a name that refers to a value.
  - We can think of a **variable** as a box that has a value, or multiple values, packed inside it.
  
- A **variable** is just a name!

:::

::::

## Python Basics
###  Values, Variables, and Types

::: {}
- Sometimes you will hear variables referred to as **objects**.

- Everything that is not a *literal value*, such as `10`, is an **object**. 

:::


## Python Basics
## Variable in `data.frame`

<div style="text-align: center; width: 70%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/tidy-1.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>

- **Definition**: A `data.frame` is a table-like data structure used for storing data in a tabular format with rows and columns.
- **Structure**: Consists of:
  - **Variables** (Columns)
  - **Observations** (Rows)
  - **Values** (Cells): Individual data points within each cell of the `data.frame`.


## Python Basics
###  Assignment ( `=` )


```{.python}
# Here we assign the integer value 5 to the variable x.
x = 5   

# Now we can use the variable x in the next line.
y = x + 12  
y
```

- In Python, we use `=` to assign a value to a variable.

- In math, `=` means *equality* of both sides.
- In programs, `=` means **assignment**: *assign the value on the right side to the variable on the left side*.



## Python Basics
###  Code and comment style 
- The two main principles for coding and managing data are:
  - Make things easier for your future self.
  - Don't trust your future self.

- The `#` mark is Google Colab's comment character.
  - The `#` character has many names: `hash`, `sharp`, `pound`, or `octothorpe`.
  - `#` indicates that the rest of the line is to be ignored.
  - Write comments before the line that you want the comment to apply to.

- Consider adding more comments on code cells and their results using text cells.




## Python Basics
###  Assignment


- In programming code, everything on the right side needs to have a value.
  - The right side can be a literal value, or a variable that has already been assigned a value, or a combination.
  
- When Python reads `y = x + 12`, it does the following:
  1. Sees the `=` in the middle.
  2. Knows that this is an assignment.
  3. Calculates the right side (gets the value of the object referred to by `x` and adds it to `12`).
  4. Assigns the result to the left-side variable, `y`.






## Python Basics
###  Variables Are Names, Not Places

```{.python}
list_example = [10, 1.23, "like this", True, None]
print(list_example)
type(list_example)
```


- The most basic built-in data types that we'll need to know about are: 
  - **integers** `10`
  - **floats** `1.23`
  - **strings** `"like this"`
  - **booleans** `True`
  - **nothing** `None`

- Python also has a built-in type of data container called a **list** (e.g., `[10, 15, 20]`) that can *contain* anything, even different **types** 


## Python Basics
###  Types


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/int-py-tab2-1.png" width="600">
</p>


- The second column (Type) contains the Python name of that type. 

- The third column (Mutable?) indicates whether the value can be changed after creation.



## Python Basics
###  Brackets

::: {.nonincremental}

- There are several kinds of brackets in Python, including `[]`, `{}`, and `()`. 


::: {.panel-tabset}

## `[]`


```{.python}
vector = ['a', 'b']
vector[0]
```

- `[]` is used to denote a **list** or to signify accessing a *position* using an index.




## `{}`


```{.python}
{'a', 'b'}  # set
{'first_letter': 'a', 'second_letter': 'b'}  # dictionary
```

- `{}` is used to denote a **set** or a **dictionary** (with key-value pairs).


## `()`

```{.python}
num_tup = (1, 2, 3)
sum(num_tup)
```

- `()` is used to denote 
  - a **tuple**, or 
  - the *arguments* to a *function*, e.g., function(x) where x is the input passed to the function.


:::

::: 


## Python Basics
###  Operators

```{.python}
string_one = "This is an example "
string_two = "of string concatenation"
string_full = string_one + string_two
print(string_full)
```



- All of the basic operators we see in mathematics are available to use:

:::: {.columns}
::: {.column width="33.3%"}

  - `+` for addition
  - `-` for subtraction 

:::

::: {.column width="33.4%"}

  - `*` for multiplication
  - `**` for powers

:::

::: {.column width="33.3%"}

  - `/` for division
  - `//` for integer division

:::

::::

- These work as you'd expect on numbers. 
- These operators are sometimes defined for other built-in data types too. 
  - We can 'sum' strings (which really *concatenates* them).



## Python Basics
###  Operators
:::: {.columns}
::: {.column width="50%"}

```{.python}
list_one = ["apples", "oranges"]
list_two = ["pears", "satsumas"]
list_full = list_one + list_two
print(list_full)
```

- It works for lists too:

:::

::: {.column width="50%"}

```{.python}
string = "apples, "
print(string * 3)
```

- We can multiply strings!


:::
::::




## Python Basics
###  Operators

**Q**. [Classwork 4.1](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-1){target="_blank"}

Using Python operations only, calculate below:
$$\frac{2^5}{7 \cdot (4 - 2^3)}$$ 



## Python Basics
###  Casting Variables

:::: {.columns}
::: {.column width="50%"}
```{.python}
orig_number = 4.39898498
type(orig_number)
```
:::

::: {.column width="50%"}
```{.python}
mod_number = int(orig_number)
mod_number
type(mod_number)
```
:::
::::


- Sometimes we need to explicitly cast a value from one type to another. 

  - We can do this using built-in functions like `str()`, `int()`, and `float()`. 
  - If we try these, Python will do its best to interpret the input and convert it to the output type we'd like and, if they can't, the code will throw a great big error.
  


## Python Basics
###  Tuples and (im)mutability
::: {}

- A tuple is an object that is defined by parentheses and entries that are separated by commas, for example `(15, 20, 32)`. (They are of type tuple.) 

- Tuples are immutable, while lists are mutable.

- Immutable objects, such as tuples and strings, can't have their elements changed, appended, extended, or removed. 
  - Mutable objects, such as lists, can do all of these things. 

- In everyday programming, we use **lists** and **dictionaries** more than *tuples*.

:::




## Python Basics
###  Dictionaries



```{.python}
cities_to_temps = {"Paris": 28, "London": 22, "New York": 36, "Seoul": 29}

cities_to_temps.keys()
cities_to_temps.values()
cities_to_temps.items()
```

- Another built-in Python type that is enormously useful is the dictionary. 
  - This provides a mapping one set of variables to another (either one-to-one or many-to-one). 
  - If you need to create associations between objects, use a dictionary.
  
  
- We can obtain keys, values, or key-value paris from dictionaries.




## Python Basics
###  Running on Empty

- Being able to create empty containers is sometimes useful, especially when using loops. 

- The commands to create empty lists, tuples, dictionaries, and sets are `lst = []`, `tup=()`, `dic={}`, and `st = set()` respectively.

- **Q.** What is the type of an empty list?


# Booleans, Conditions, and `if` Statements {background-color="#1c4982"}


## Booleans, Conditions, and `if` Statements


```{.python}
10 == 20
10 == '10'
```

- Boolean data have either `True` or `False` value.



##  Booleans, Conditions, and `if` Statements

```{r, eval = T, echo = F, out.width='100%', fig.align='center'}
text_tbl <- data.frame(
  Operator = c("x and y", "x or y", "not x"),
  Description = c("Are x and y both True?",
"Is at least one of x and y True?",
"Is x False?")
  )


# Create a DT datatable without search box and 'Show entries' dropdown
DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)
```



- Existing booleans can be combined, which create a boolean when executed.



##  Booleans, Conditions, and `if` Statements

Conditions are expressions that evaluate as booleans. 

```{r, eval = T, echo = F, out.width='100%', fig.align='center'}
text_tbl <- data.frame(
  Operator = c("x == y", "x != y", "x > y", "x >= y", "x < y", "x <= y"),
  Description = c("Is x equal to y?",
"Is x not equal to y?",
"Is x greater than y?",
"Is x greater than or equal to y?",
"Is x less than y?",
"Is x less than or equal to y?")
)

# Create a DT datatable without search box and 'Show entries' dropdown
DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)


```



##  Booleans, Conditions, and `if` Statements


```{.python}
boolean_condition1 = 10 == 20
print(boolean_condition1)

boolean_condition2 = 10 == '10'
print(boolean_condition2)
```


- The `==` is an operator that compares the objects on either side and returns `True` if they have the same values


- **Q**. What does `not (not True)` evaluate to?

- **Q**. [Classwork 4.2](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-2){target="_blank"}



##  Booleans, Conditions, and `if` Statements


```{.python}
name = "Geneseo"
score = 99

if name == "Geneseo" and score > 90:
    print("Geneseo, you achieved a high score.")

if name == "Geneseo" or score > 90:
    print("You could be called Geneseo or have a high score")

if name != "Geneseo" and score > 90:
    print("You are not called Geneseo and you have a high score")
```

- The real power of conditions comes when we start to use them in more complex examples, such as `if` statements.



  
##  Booleans, Conditions, and `if` Statements

```{.python}
name_list = ["Lovelace", "Smith", "Hopper", "Babbage"]

print("Lovelace" in name_list)

print("Bob" in name_list)
```



- One of the most useful conditional keywords is `in`. 
  - This one must pop up ten times a day in most coders' lives because it can pick out a variable or make sure something is where it's supposed to be.


- **Q**. Check if "a" is in the string "Sun Devil Arena" using `in`. Is "a" in "Anyone"?




##  Booleans, Conditions, and `if` Statements


```{.python}
score = 98

if score == 100:
    print("Top marks!")
elif score > 90 and score < 100:
    print("High score!")
elif score > 10 and score <= 90:
    pass
else:
    print("Better luck next time.")
```

- One conditional construct we're bound to use at some point, is the `if-else` chain:


##  Booleans, Conditions, and `if` Statements
###  Indentation

- We have seen that certain parts of the code examples are indented. 

- Code that is part of a function, a conditional clause, or loop is indented. 

- Indention is actually what tells the Python interpreter that some code is to be executed as part of, say, a loop and not to executed after the loop is finished.




##  Booleans, Conditions, and `if` Statements
###  Indentation


```{.python}
x = 10

if x > 2:
    print("x is greater than 2")
```

- Here's a basic example of indentation as part of an `if` statement.

- The standard practice for indentation is that each sub-statement should be indented by 4 spaces.




# Slicing Methods with Strings and Lists {background-color="#1c4982"}


## Slicing Methods

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/python_string_index.png">
</p>


- With slicing methods, we can get subset of the data object.

- Slicing methods can apply for strings, lists, arrays, and DataFrames.

- The above example describes indexing in Python


## Slicing Methods
###  Strings

```{.python}
string = "cheesecake"
print( string[-4:] )
```

- From strings, we can access the individual characters via slicing and indexing. 



:::: {.columns}
::: {.column width="50%"}
```{.python}
string = "cheesecake"
print("String has length:")
print( len(string) )
```
:::

::: {.column width="50%"}
```{.python}
list_of_numbers = range(1, 20)
print("List of numbers has length:")
print( len(list_of_numbers) )
```
:::
::::

- Both lists and strings will allow us to use the `len()` command to get their length:


## Slicing Methods
###  String-related Functions

#### Dot operation

- In Python, we can access attributes by using a dot notation (`.`).

- Unlike `len()`, some functions use a dot to access to strings. 

- To use those string functions, type (1) the name of the string, (2) a dot, (3) the name of the function, and (4) any arguments that the function needs: 

  - `string_name.some_function(arguments)`.



## Slicing Methods
###  String-related Functions
#### Split with `split()`
- We can use the built-in string `split()` function to break a string into a list of smaller strings based on some *separator*.
  - If we don’t specify a *separator*, `split()` uses any sequence of white space characters---newlines, spaces, and tabs:
```{.python}
tasks = 'get gloves,get mask,give cat vitamins,call ambulance'
tasks.split(',')
tasks.split()
```


## Slicing Methods
###  String-related Functions

#### Combine by Using `join()`
- `join()` collapses a *list* of strings into a single string.
```{.python}
crypto_list = ['Yeti', 'Bigfoot', 'Loch Ness Monster']
crypto_string = ', '.join(crypto_list)
print('Found and signing book deals:', crypto_string)
```


## Slicing Methods
### Strings and Slicing

- We can extract a substring (a part of a string) from a string by using a **slice**. 

- We define a slice by using square brackets (`[]`), a *start* index, an *end* index, and an optional *step* count between them. 

  - We can omit some of these. 

- The slice will include characters from index *start* to one before *end*:





## Slicing Methods
### Get a Substring with a Slice


::: {.panel-tabset}
## `[:]`
```{.python}
letters = 'abcdefghij'
letters[:]
```
- `[:]` extracts the entire sequence from start to end.


## `[ start :]`
```{.python}
letters = 'abcdefghij'
letters[4:]
letters[2:]
letters[-3:]
letters[-50:]
```
- `[ start :]` specifies from the *start* index to the end.


## `[: end ]`
```{.python}
letters = 'abcdefghij'
letters[:3]
letters[:-3]
letters[:70]
```
- `[: end ]` specifies from the beginning to the *end* index minus 1.



## `[ start : end ]`
```{.python}
letters = 'abcdefghij'
letters[2:5]
letters[-26:-24]
letters[35:37]
```
- `[ start : end ]` indicates from the *start* index to the *end* index minus 1.


## `[ start : end : step ]`
```{.python}
letters = 'abcdefghij'
letters[2 : 6 : 2]   # From index 2 to 5, by steps of 2 characters
letters[ : : 3]     # From the start to the end, in steps of 3 characters
letters[ 6 : : 4 ]    # From index 19 to the end, by 4
letters[ : 7 : 5 ]    # From the start to index 6 by 5:
letters[-1 : : -1 ]   # Starts at the end and ends at the start
letters[: : -1 ]
```
- `[ start : end : step ]` extracts from the *start* index to the *end* index minus 1, skipping characters by *step*.


:::




## Slicing Methods
### Lists

- Python is 
  - a zero-indexed language (things start counting from zero);
  - left inclusive;
  - right exclusive when we are specifying a range of values.




## Slicing Methods
### Lists

  
```{.python}
list_example = ['one', 'two', 'three']
list_example[ 0 : 1 ]
list_example[ 1 : 3 ]
```


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/python-slicing-fence.png">
</p>


- We can think of items in a list-like object as being fenced in. 
  - The index represents the fence post.

## Slicing Methods
### Lists

::: {.panel-tabset}
## `[index]`
### Get an Item by `[index]`
```{.python}
suny = ['Geneseo', 'Brockport', 'Oswego', 'Binghamton', 
        'Stony Brook', 'New Paltz'] 
```

- We can extract a single value from a list by specifying its index:


:::: {.columns}
::: {.column width="50%"}
```{.python}
suny[0]
suny[1]
suny[2]
suny[7]
```
:::

::: {.column width="50%"}
```{.python}
suny[-1]
suny[-2]
suny[-3]
suny[-7]
```
:::

::::



## Slicing Methods
### Get an Item with a Slice
- We can extract a subsequence of a list by using a *slice*:
```{.python}
suny = ['Geneseo', 'Brockport', 'Oswego', 'Binghamton', 
        'Stony Brook', 'New Paltz'] 
suny[0:2]    # A slice of a list is also a list.
```

:::: {.columns}
::: {.column width="50%"}
```{.python}
suny[ : : 2]
suny[ : : -2]
suny[ : : -1]
```
:::

::: {.column width="50%"}
```{.python}
suny[4 : ]
suny[-6 : ]
suny[-6 : -2]
suny[-6 : -4]
```
:::


::::

:::




## Slicing Methods

- **Q**. [Classwork 4.3](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-3){target="_blank"}



# Functions, Arguments, and Parameters {background-color="#1c4982"}

## Functions, Arguments, and Parameters
### Functions

```{.python}
int("20") 
float("14.3")
str(5)
int("xyz")
```


- A function can take any number and type of input *parameters* and **return** any number and type of output *results*.

- Python ships with more than 65 built-in functions. 

- Python also allows a user to define a new function.

- We will mostly use built-in functions. 



## Functions, Arguments, and Parameters

```{.python}
print("Cherry", "Strawberry", "Key Lime")
print("Cherry", "Strawberry", "Key Lime", sep = "!")
print("Cherry", "Strawberry", "Key Lime", sep=" ")
```


- We invoke a function by entering its name and a pair of opening and closing parentheses. 

- Much as a cooking recipe can accept ingredients, a function invocation can accept inputs called **arguments**. 

- We pass arguments sequentially inside the parentheses (, separated by commas).

- A **parameter** is a name given to an expected function argument.

- A *default argument* is a fallback value that Python passes to a parameter if the function invocation does not explicitly provide one.


## Functions, Arguments, and Parameters

- **Q**. [Classwork 4.4](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-4){target="_blank"}






# Loop with `while` and `for` {background-color="#1c4982"}


##  Repeat with `while`

:::: {.columns}

::: {.column width="50%"}

```{.python}
count = 1        
while count <= 5:
    print(count)
    count += 1
```

:::

::: {.column width="50%"}


1. We first assigned the value 1 to `count`.
2. The `while` loop compared the value of `count` to 5 and continued if `count` was less than or equal to 5.
3. Inside the loop, we printed the value of `count` and then *incremented* its value by one with the statement `count += 1`.
4. Python goes back to the top of the loop, and again compares `count` with 5.
5. The value of `count` is now 2, so the contents of the `while` loop are again executed, and `count` is incremented to 3.
6. This continues until `count` is incremented from 5 to 6 at the bottom of the loop.
7. On the next trip to the top, `count <= 5` is now `False`, and the `while` loop ends.

:::
::::



## Repeat with `while`
###  Asking the user for input
  

:::: {.columns}

::: {.column width="50%"}

```{.python}
stuff = input()
# Type something and press Return/Enter on Console 
# before running print(stuff)
print(stuff)
```

:::

::: {.column width="50%"}


- Sometimes we would like to take the value for a variable from the user via their keyboard. 
  - The `input()` function gets *input* from the keyboard.
  - When the `input()` is called, the program stops and waits for the user to type something on Console (interactive Python interpreter).
  - When the user presses **Return** or **Enter** on Console, the program resumes and input returns what the user typed as a string.

:::
::::

## Repeat with `while`
###  Cancel with `break`

:::: {.columns}

::: {.column width="50%"}
```{.python}
while True:
    user_input = input("Enter 'yes' to continue or 'no' to stop: ")
    if user_input.lower() == 'no':
        print("Exiting the loop. Goodbye!")
        break
    elif user_input.lower() == 'yes':
        print("You chose to continue.")
    else:
        print("Invalid input, please enter 'yes' or 'no'.")
```

:::

::: {.column width="50%"}

- `While` loop is used to execute a block of code repeatedly until given boolean condition evaluated to `False`. 
  - `while True` loop will run forever unless we write it with a `break` statement.

- If we want to loop until something occurs, but we’re not sure when that might happen, we can use an infinite loop with a `break` statement. 


:::
::::


## Repeat with `while`
###  Skip Ahead with `continue`

:::: {.columns}

::: {.column width="50%"}
```{.python}
while True:
    value = input("Integer, please [q to quit]: ")
    if value == 'q': # quit
        break
    number = int(value)
    if number % 2 == 0: # an even number
        continue
    print(number, "squared is", number*number)
```

:::
::: {.column width="50%"}
- Sometimes, we don’t want to break out of a loop but just want to skip ahead to the
next iteration for some reason. 

- The `continue` statement is used to skip the rest of the code inside a loop for the *current iteration* only. 

:::
::::


## Repeat with `while`
### Check `break` Use with `else`

- We can consider using `while` with `else` when we’ve coded a `while` loop to check for something, and `break`ing as soon as it’s found. 
  <!-- - The `else` would be run if the `while` loop completed but the object was not found. -->
  
```{.python}
numbers = [1, 3, 5]
position = 0

while position < len(numbers):
    number = numbers[position]
    if number > 4:  # Condition changed to checking if the number is greater than 4
        print('Found a number greater than 4:', number)
        break
    position += 1
else:  # break not called
    print('No number greater than 4 found')
```
- Consider it a break checker.


##  Iterate with `for` and `in`

- Sometimes we want to loop through a set of things such as a string of text, a list of words or a list of numbers.

  - When we have a list of things to loop through, we can construct a `for` loop. 

  - A `for` loop makes it possible for you to traverse data structures without knowing how large they are or how they are implemented. 
  
  <!-- - We can iterate over data that is created on the fly, allowing processing of data streams that would otherwise not fit in the computer’s memory all at once. -->


<!-- - To do iteration, we need something like *strings*, *lists* and *tuples* or *dictionaries* to iterate over.  -->


##  Iterate with `for` and `in`

- Let's see two ways to walk through a string here:


:::: {.columns}

::: {.column width="50%"}
```{.python}
word = 'thud'
offset = 0
while offset < len(word):
    print(word[offset])
    offset += 1
```
:::

::: {.column width="50%"}
```{.python}
word = 'thud'
for letter in word:
    print(letter)
```
:::
::::

- Which one do you prefer?


## Iterate with `for` and `in`
###  Cancel with `break`

```{.python}
word = 'thud'
for letter in word:
    if letter == 'u':
        break
    print(letter)
```

- A `break` in a `for` loop breaks out of the loop, as it does for a `while` loop:

## Iterate with `for` and `in`
###  Skip with `continue`

```{.python}
word = 'thud'
for letter in word:
    if letter == 'u':
        continue
    print(letter)
```
- Inserting a `continue` in a `for` loop jumps to the next iteration of the loop, as it does for a `while` loop.



## Iterate with `for` and `in`
### Generate Number Sequences with `range()`

- The `range()` function returns a stream of numbers within a specified range, without
first having to create and store a large data structure such as a *list* or *tuple*. 

  - This lets us create huge ranges without using all the memory in our computers and crashing our program.
  
  - `range()` returns an iterable object, so we need to step through the values with `for` ... `in`, or convert the object to a sequence like a *list*. 


## Iterate with `for` and `in`
### `for` ... `in` `range()`

:::: {.columns}

::: {.column width="50%"}
```{.python}
for x in range(0, 3):
    print(x)
list( range(0, 3) )
```

:::

::: {.column width="50%"}
- We use `range()` similar to how we use *slices*: `range( start, stop, step )`. 
  - If we omit `start`, the `range` begins at 0. 
  - The only required value is `stop`; as with *slices*, the last value created will be just before stop. 
  - The default value of `step` is 1, but we can change it.

:::

::::


## Iterate with `for` and `in`
### Check `break` Use with `else`
- Similar to `while`, `for` has an optional `else` that checks whether the `for` completed normally. 
  - If `break` was not called, the `else` statement is run.

```{.python}
word = 'thud'
for letter in word:
    if letter == 'x':
        print("Eek! An 'x'!")
        break
    print(letter)
else:
    print("No 'x' in there.")
```


## Google Colab Settings
### Turn off AI Assistance

- On Google Colab
  1. From the top-right corner, click :gear:
  2. Click "AI Assistance" from the side menu.
  3. Disable all options.




## Loop with `while` and `for`
###  Class Exercises

- **Q**. [Classwork 4.5](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-5){target="_blank"}


- **Q**. [Classwork 4.6](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-6){target="_blank"}






# Handle Errors with `try` and `except` {background-color="#1c4982"}

## Handle Errors with `try` and `except`
### Exception handlers



## Handle Errors with `try` and `except`
### Exception handlers

- In some languages, errors are indicated by special function return values. 
  - Python uses *exceptions*: code that is executed when an associated error occurs.

- When we run code that might fail under some circumstances, we also need appropriate *exception handlers* to intercept any potential errors.

  - Accessing a list or tuple with an out-of-range position, or a dictionary with a nonexistent key.
  

## Handle Errors with `try` and `except`
### Errors


```{.python}
short_list = [1, 2, 3]
position = 5
short_list[position]
```
- If we don’t provide your own exception handler, Python prints an error message and some information about where the error occurred and then terminates the program:


## Handle Errors with `try` and `except`


```{.python}
short_list = [1, 2, 3]
position = 5

try:
    short_list[position]
except:
    print('Need a position between 0 and', len(short_list)-1, ' but got',
    position)
```

- Rather than leaving things to chance, use `try` to wrap your code, and `except` to provide the error handling:

## Handle Errors with `try` and `except`


```{.python}
short_list = [1, 2, 3]
position = 5
try:
    short_list[position]
except:
    print('Need a position between 0 and', len(short_list)-1, ' but got',
    position)
```

- The code inside the `try` block is run. 
  - If there is an error, an exception is raised and the code inside the `except` block runs. 
- If there are no errors, the `except` block is skipped.


## Handle Errors with `try` and `except`
### `except` type
- Specifying a plain `except` with no arguments, as we did here, is a catchall for any exception type.

- If more than one type of exception could occur, it’s best to provide a
separate exception handler for each.

- We get the full exception object in the variable name if we use the form:

<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/int-py-ch9-exception.png" style="width: 90%; margin-bottom: -20px;">
  <p style="font-style: bold;"></p>
</div>


## Handle Errors with `try` and `except`
### `except` type
```{.python}
short_list = [1, 2, 3]
while True:
    value = input('Position [q to quit]? ')
    if value == 'q':
        break
    try:
        position = int(value)
        print(short_list[position])
    except IndexError as err:
        print('Bad index:', position)
    except Exception as other:
        print('Something else broke:', other)
```


## Handle Errors with `try` and `except`
### `except` type

- The example looks for an `IndexError` first, because that’s the exception type raised when we provide an illegal position to a sequence. 
- It saves an `IndexError` exception in the variable `err`, and any other exception in the variable `other`. 

- The example prints everything stored in `other` to show what you get in that object.

  - Inputting position `3` raised an `IndexError` as expected. 
  - Entering `two` annoyed the `int()` function, which we handled in our second, catchall `except` code.





## Handle Errors with `try` and `except`
###  Class Exercises

- **Q**. [Classwork 4.7](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-7){target="_blank"}




# Importing Modules, Packages, and Libraries {background-color="#1c4982"}


## Importing Modules, Packages, and Libraries

- A **module** is basically a bunch of related codes saved in a file with the extension `.py`.

- A **package** is basically a directory of a collection of modules. 

- A **library** is a collection of packages


- We refer to code of other modules/pacakges/libraries by using the Python `import` statement. 
  - This makes the code and variables in the imported module available to our programming codes.
  - We can use the `as` *keyword* when importing the modules using their canonical names.

- **Q**. [Classwork 4.8](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-8){target="_blank"}



