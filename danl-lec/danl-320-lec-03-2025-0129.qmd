---
title: Lecture 3
subtitle: Python Basics; Big Data; Hadoop
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2025-01-29
execute: 
  eval: true
  echo: true
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---


```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```



# Python Basics {background-color="#1c4982"}


## Python Basics
###  Variables Are Names, Not Places

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/py-basic-box.png">
</p>

- A **value** is datum (literal) such as a number or text. 

- There are different types of values: 
  - 352.3 is known as a float or double;
  - 22 is an integer;
  - "Hello World!" is a string.

## Python Basics
###  Values, Variables, and Types

```{.python}
a = 10
print(a)
```


:::: {.columns}

::: {.column width="50%"}

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/int-py-fig2-3.png" width="400">
</p>

:::

::: {.column width="50%"}


- A **variable** is a name that refers to a value.
  - We can think of a **variable** as a box that has a value, or multiple values, packed inside it.
  
- A **variable** is just a name!

:::

::::

## Python Basics
###  Values, Variables, and Types

::: {}
- Sometimes you will hear variables referred to as **objects**.

- Everything that is not a *literal value*, such as `10`, is an **object**. 

:::


## Python Basics
###  Assignment ( `=` )


```{.python}
# Here we assign the integer value 5 to the variable x.
x = 5   

# Now we can use the variable x in the next line.
y = x + 12  
y
```

- In Python, we use `=` to assign a value to a variable.

- In math, `=` means *equality* of both sides.
- In programs, `=` means **assignment**: *assign the value on the right side to the variable on the left side*.



## Python Basics
###  Code and comment style 
- The two main principles for coding and managing data are:
  - Make things easier for your future self.
  - Don't trust your future self.

- The `#` mark is Google Colab's comment character.
  - The `#` character has many names: `hash`, `sharp`, `pound`, or `octothorpe`.
  - `#` indicates that the rest of the line is to be ignored.
  - Write comments before the line that you want the comment to apply to.

- Consider adding more comments on code cells and their results using text cells.




## Python Basics
###  Assignment


- In programming code, everything on the right side needs to have a value.
  - The right side can be a literal value, or a variable that has already been assigned a value, or a combination.
  
- When Python reads `y = x + 12`, it does the following:
  1. Sees the `=` in the middle.
  2. Knows that this is an assignment.
  3. Calculates the right side (gets the value of the object referred to by `x` and adds it to `12`).
  4. Assigns the result to the left-side variable, `y`.






## Python Basics
###  Variables Are Names, Not Places

```{.python}
list_example = [10, 1.23, "like this", True, None]
print(list_example)
type(list_example)
```


- The most basic built-in data types that we'll need to know about are: 
  - **integers** `10`
  - **floats** `1.23`
  - **strings** `"like this"`
  - **booleans** `True`
  - **nothing** `None`

- Python also has a built-in type of data container called a **list** (e.g., `[10, 15, 20]`) that can *contain* anything, even different **types** 


## Python Basics
###  Types


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/int-py-tab2-1.png" width="600">
</p>


- The second column (Type) contains the Python name of that type. 

- The third column (Mutable?) indicates whether the value can be changed after creation.



## Python Basics
###  Brackets

::: {.nonincremental}

- There are several kinds of brackets in Python, including `[]`, `{}`, and `()`. 


::: {.panel-tabset}

## `[]`


```{.python}
vector = ['a', 'b']
vector[0]
```

- `[]` is used to denote a **list** or to signify accessing a *position* using an index.




## `{}`


```{.python}
{'a', 'b'}  # set
{'first_letter': 'a', 'second_letter': 'b'}  # dictionary
```

- `{}` is used to denote a **set** or a **dictionary** (with key-value pairs).


## `()`

```{.python}
num_tup = (1, 2, 3)
sum(num_tup)
```

- `()` is used to denote 
  - a **tuple**, or 
  - the *arguments* to a *function*, e.g., function(x) where x is the input passed to the function.


:::

::: 


## Python Basics
###  Operators

```{.python}
string_one = "This is an example "
string_two = "of string concatenation"
string_full = string_one + string_two
print(string_full)
```



- All of the basic operators we see in mathematics are available to use:

:::: {.columns}
::: {.column width="33.3%"}

  - `+` for addition
  - `-` for subtraction 

:::

::: {.column width="33.4%"}

  - `*` for multiplication
  - `**` for powers

:::

::: {.column width="33.3%"}

  - `/` for division
  - `//` for integer division

:::

::::

- These work as you'd expect on numbers. 
- These operators are sometimes defined for other built-in data types too. 
  - We can 'sum' strings (which really *concatenates* them).



## Python Basics
###  Operators
:::: {.columns}
::: {.column width="50%"}

```{.python}
list_one = ["apples", "oranges"]
list_two = ["pears", "satsumas"]
list_full = list_one + list_two
print(list_full)
```

- It works for lists too:

:::

::: {.column width="50%"}

```{.python}
string = "apples, "
print(string * 3)
```

- We can multiply strings!


:::
::::




## Python Basics
###  Operators

**Q**. [Classwork 4.1](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-1){target="_blank"}

Using Python operations only, calculate below:
$$\frac{2^5}{7 \cdot (4 - 2^3)}$$ 





## Python Basics
###  Booleans and Conditions


```{.python}
10 == 20
10 == '10'
```

- Boolean data have either `True` or `False` value.



## Python Basics
###  Booleans and Conditions

```{r, eval = T, echo = F, out.width='100%', fig.align='center'}
text_tbl <- data.frame(
  Operator = c("x and y", "x or y", "not x"),
  Description = c("Are x and y both True?",
"Is at least one of x and y True?",
"Is x False?")
  )


# Create a DT datatable without search box and 'Show entries' dropdown
DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)
```



- Existing booleans can be combined, which create a boolean when executed.



## Python Basics
###  Booleans and Conditions

Conditions are expressions that evaluate as booleans. 

```{r, eval = T, echo = F, out.width='100%', fig.align='center'}
text_tbl <- data.frame(
  Operator = c("x == y", "x != y", "x > y", "x >= y", "x < y", "x <= y"),
  Description = c("Is x equal to y?",
"Is x greater than y?",
"Is x greater than or equal to y?",
"Is x greater than or equal to y?",
"Is x less than y?",
"Is x less than or equal to y?")
)

# Create a DT datatable without search box and 'Show entries' dropdown
DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)


```



## Python Basics
###  Booleans and Conditions


```{.python}
boolean_condition1 = 10 == 20
print(boolean_condition1)

boolean_condition2 = 10 == '10'
print(boolean_condition2)
```


- The `==` is an operator that compares the objects on either side and returns `True` if they have the same values


- **Q**. What does `not (not True)` evaluate to?

- **Q**. [Classwork 4.2](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-2){target="_blank"}



## Python Basics
###  Booleans and Conditions


```{.python}
name = "Geneseo"
score = 99

if name == "Geneseo" and score > 90:
    print("Geneseo, you achieved a high score.")

if name == "Geneseo" or score > 90:
    print("You could be called Geneseo or have a high score")

if name != "Geneseo" and score > 90:
    print("You are not called Geneseo and you have a high score")
```

- The real power of conditions comes when we start to use them in more complex examples, such as `if` statements.



  
## Python Basics
###  Booleans and Conditions

```{.python}
name_list = ["Lovelace", "Smith", "Hopper", "Babbage"]

print("Lovelace" in name_list)

print("Bob" in name_list)
```



- One of the most useful conditional keywords is `in`. 
  - This one must pop up ten times a day in most coders' lives because it can pick out a variable or make sure something is where it's supposed to be.


- **Q**. Check if "a" is in the string "Sun Devil Arena" using `in`. Is "a" in "Anyone"?




## Python Basics
###  Booleans and Conditions


```{.python}
score = 98

if score == 100:
    print("Top marks!")
elif score > 90 and score < 100:
    print("High score!")
elif score > 10 and score <= 90:
    pass
else:
    print("Better luck next time.")
```

- One conditional construct we're bound to use at some point, is the `if-else` chain:








## Python Basics
###  Casting Variables

:::: {.columns}
::: {.column width="50%"}
```{.python}
orig_number = 4.39898498
type(orig_number)
```
:::

::: {.column width="50%"}
```{.python}
mod_number = int(orig_number)
mod_number
type(mod_number)
```
:::
::::


- Sometimes we need to explicitly cast a value from one type to another. 

  - We can do this using built-in functions like `str()`, `int()`, and `float()`. 
  - If we try these, Python will do its best to interpret the input and convert it to the output type we'd like and, if they can't, the code will throw a great big error.
  


## Python Basics
###  Tuples and (im)mutability
::: {}

- A tuple is an object that is defined by parentheses and entries that are separated by commas, for example `(15, 20, 32)`. (They are of type tuple.) 

- Tuples are immutable, while lists are mutable.

- Immutable objects, such as tuples and strings, can't have their elements changed, appended, extended, or removed. 
  - Mutable objects, such as lists, can do all of these things. 

- In everyday programming, we use **lists** and **dictionaries** more than *tuples*.

:::


## Python Basics
###  Indentation

- We have seen that certain parts of the code examples are indented. 

- Code that is part of a function, a conditional clause, or loop is indented. 

- Indention is actually what tells the Python interpreter that some code is to be executed as part of, say, a loop and not to executed after the loop is finished.




## Python Basics
###  Indentation


```{.python}
x = 10

if x > 2:
    print("x is greater than 2")
```

- Here's a basic example of indentation as part of an `if` statement.

- The standard practice for indentation is that each sub-statement should be indented by 4 spaces.





## Python Basics
###  `for` Loops



```{.python}
name_list = ["Ben", "Chris", "Kate", "Mary"]

for name in name_list:
    print(name)
```


- A loop is a way of executing a similar piece of code over and over in a similar way. 
  - The most useful loop is **for loops**.
  
- As long as our object is an iterable, then it can be used in this way in a *for loop*.

- Lists, tuples, strings, and dictionaries are iterable.





## Python Basics
###  Dictionaries



```{.python}
cities_to_temps = {"Paris": 28, "London": 22, "Seville": 36, "Wellesley": 29}

cities_to_temps.keys()
cities_to_temps.values()
cities_to_temps.items()
```

- Another built-in Python type that is enormously useful is the dictionary. 
  - This provides a mapping one set of variables to another (either one-to-one or many-to-one). 
  - If you need to create associations between objects, use a dictionary.
  
  
- We can obtain keys, values, or key-value paris from dictionaries.




## Python Basics
###  Running on Empty

- Being able to create empty containers is sometimes useful, especially when using loops. 

- The commands to create empty lists, tuples, dictionaries, and sets are `lst = []`, `tup=()`, `dic={}`, and `st = set()` respectively.

- **Q.** What is the type of an empty list?


## Python Basics
### Slicing Methods



<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/python_string_index.png">
</p>


- With slicing methods, we can get subset of the data object.

- Slicing methods can apply for strings, lists, arrays, and DataFrames.

- The above example describes indexing in Python




## Python Basics
###  Strings



```{.python}
string = "cheesecake"
print( string[-4:] )
```

- From strings, we can access the individual characters via slicing and indexing. 



:::: {.columns}
::: {.column width="50%"}
```{.python}
string = "cheesecake"
print("String has length:")
print( len(string) )
```
:::

::: {.column width="50%"}
```{.python}
list_of_numbers = range(1, 20)
print("List of numbers has length:")
print( len(list_of_numbers) )
```
:::
::::

- Both lists and strings will allow us to use the `len()` command to get their length:




## Python Basics
### Strings and Slicing

- We can extract a substring (a part of a string) from a string by using a **slice**. 

- We define a slice by using square brackets (`[]`), a *start* index, an *end* index, and an optional *step* count between them. 

  - We can omit some of these. 

- The slice will include characters from index *start* to one before *end*:





## Python Basics
### Get a Substring with a Slice


::: {.panel-tabset}
## `[:]`
```{.python}
letters = 'abcdefghij'
letters[:]
```
- `[:]` extracts the entire sequence from start to end.


## `[ start :]`
```{.python}
letters = 'abcdefghij'
letters[4:]
letters[2:]
letters[-3:]
letters[-50:]
```
- `[ start :]` specifies from the *start* index to the end.


## `[: end ]`
```{.python}
letters = 'abcdefghij'
letters[:3]
letters[:-3]
letters[:70]
```
- `[: end ]` specifies from the beginning to the *end* index minus 1.



## `[ start : end ]`
```{.python}
letters = 'abcdefghij'
letters[2:5]
letters[-26:-24]
letters[35:37]
```
- `[ start : end ]` indicates from the *start* index to the *end* index minus 1.


## `[ start : end : step ]`
```{.python}
letters = 'abcdefghij'
letters[2 : 6 : 2]   # From index 2 to 5, by steps of 2 characters
letters[ : : 3]     # From the start to the end, in steps of 3 characters
letters[ 6 : : 4 ]    # From index 19 to the end, by 4
letters[ : 7 : 5 ]    # From the start to index 6 by 5:
letters[-1 : : -1 ]   # Starts at the end and ends at the start
letters[: : -1 ]
```
- `[ start : end : step ]` extracts from the *start* index to the *end* index minus 1, skipping characters by *step*.


:::




## Python Basics
### Lists and Slicing

- Python is 
  - a zero-indexed language (things start counting from zero);
  - left inclusive;
  - right exclusive when we are specifying a range of values.




## Python Basics
### Lists and Slicing

  
```{.python}
list_example = ['one', 'two', 'three']
list_example[ 0 : 1 ]
list_example[ 1 : 3 ]
```


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/python-slicing-fence.png">
</p>


- We can think of items in a list-like object as being fenced in. 
  - The index represents the fence post.

## Python Basics
### Lists and Slicing

::: {.panel-tabset}
## `[index]`
### Get an Item by `[index]`
```{.python}
suny = ['Geneseo', 'Brockport', 'Oswego', 'Binghamton', 
        'Stony Brook', 'New Paltz'] 
```

- We can extract a single value from a list by specifying its index:


:::: {.columns}
::: {.column width="50%"}
```{.python}
suny[0]
suny[1]
suny[2]
suny[7]
```
:::

::: {.column width="50%"}
```{.python}
suny[-1]
suny[-2]
suny[-3]
suny[-7]
```
:::

::::



## slice
### Get an Item with a Slice
- We can extract a subsequence of a list by using a *slice*:
```{.python}
suny = ['Geneseo', 'Brockport', 'Oswego', 'Binghamton', 
        'Stony Brook', 'New Paltz'] 
suny[0:2]    # A slice of a list is also a list.
```

:::: {.columns}
::: {.column width="50%"}
```{.python}
suny[ : : 2]
suny[ : : -2]
suny[ : : -1]
```
:::

::: {.column width="50%"}
```{.python}
suny[4 : ]
suny[-6 : ]
suny[-6 : -2]
suny[-6 : -4]
```
:::


::::

:::




## Python Basics
### Lists and Slicing

- **Q**. [Classwork 4.3](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-3){target="_blank"}


## Python Basics
### Functions

```{.python}
int("20") 
float("14.3")
str(5)
int("xyz")
```


- A function can take any number and type of input *parameters* and **return** any number and type of output *results*.

- Python ships with more than 65 built-in functions. 

- Python also allows a user to define a new function.

- We will mostly use built-in functions. 



## Python Basics
### Functions, Arguments, and Parameters

```{.python}
print("Cherry", "Strawberry", "Key Lime")
print("Cherry", "Strawberry", "Key Lime", sep = "!")
print("Cherry", "Strawberry", "Key Lime", sep=" ")
```


- We invoke a function by entering its name and a pair of opening and closing parentheses. 

- Much as a cooking recipe can accept ingredients, a function invocation can accept inputs called **arguments**. 

- We pass arguments sequentially inside the parentheses (, separated by commas).

- A **parameter** is a name given to an expected function argument.

- A *default argument* is a fallback value that Python passes to a parameter if the function invocation does not explicitly provide one.


## Python Basics
### Functions, Arguments, and Parameters

- **Q**. [Classwork 4.4](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-4){target="_blank"}






## Python Basics
### Importing Modules, Packages, and Libraries

- Python is a general-purpose programming language and is not specialized for numerical or statistical computation.

- The core libraries that enable Python to store and analyze data efficiently are:
  - `pandas`
  - `numpy`
  - `matplotlib` and `seaborn`



## Python Basics
### Importing Modules, Packages, and Libraries

:::{.nonincremental}
::: {.panel-tabset}

## `pandas`

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/pandas-logo.png">
</p>

- `pandas` provides `Series` and `DataFrames` which are used to store data in an easy-to-use format.


## `numpy`
  
<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/numpy-logo.png">
</p>

- `numpy`, numerical Python, provides the array block (`np.array()`) for doing fast and efficient computations;

## `matplotlib` and `seaborn`

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/matplotlib-logo.png"><img src="https://bcdanl.github.io/lec_figs/seaborn-logo.png">
</p>

- `matplotlib` provides graphics. The most important submodule would be `matplotlib.pyplot`.
- `seaborn` provides a general improvement in the default appearance of `matplotlib`-produced plots.


:::
:::

## Python Basics
### Importing Modules, Packages, and Libraries

- A **module** is basically a bunch of related codes saved in a file with the extension `.py`.

- A **package** is basically a directory of a collection of modules. 

- A **library** is a collection of packages


- We refer to code of other modules/pacakges/libraries by using the Python `import` statement. 
  - This makes the code and variables in the imported module available to our programming codes.
  - We can use the `as` *keyword* when importing the modules using their canonical names.

- **Q**. [Classwork 4.5](https://bcdanl.github.io/320/danl-cw/danl-320-cw-04.html#question-5){target="_blank"}


# Big Data {background-color="#1c4982"}


## Big Data

- Big data and analytics are likely to be significant components of future careers across various fields.

- Big data refers to enormous and complex data collections that traditional data management tools can't handle effectively.

- Five key characteristics of big data (5 V's):
  1. Volume
  2. Velocity
  3. Value
  4. Veracity
  5. Variety


## Big Data
### 1. Volume
  - In 2017, the digital universe contained an estimated 16.1 zettabytes of data.
  - Expected to grow to 163 zettabytes by 2025.
  - Much new data will come from embedded systems in smart devices.

## Big Data
### 1. Volume

:::: {.columns}

::: {.column width="42%"}

| Name | Symbol | Value |
|------|--------|-------|
| Kilobyte | kB | 10³ |
| Megabyte | MB | 10⁶ |
| Gigabyte | GB | 10⁹ |
| Terabyte | TB | 10¹² |
| Petabyte | PB | 10¹⁵ |
| Exabyte | EB | 10¹⁸ |
| Zettabyte | ZB | 10²¹ |
| Yottabyte | YB | 10²⁴ |
| Brontobyte* | BB | 10²⁷ |
| Gegobyte* | GeB | 10³⁰ |

Note: The asterisks (*) next to Brontobyte and Gegobyte in the original image have been preserved in this table. These likely indicate that these units are less commonly used or are proposed extensions to the standard system of byte units.
:::

::: {.column width="3%"}
:::

::: {.column width="55%"}
<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/big-data.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"> Increase in size of the global datasphere</p>
</div>

:::
::::


## Big Data
### 2. Velocity
  - Refers to the rate at which new data is generated.
  - Estimated at 0.33 zetabytes each day (120 zetabytes annually).
  - 90% of the world's data was generated in just the past two years.

## Big Data
### 3. Value
  - Refers to the *worth* of data in decision-making.
  - Emphasizes the need to quickly identify and process relevant data.
  - Users may be able to find more patterns and interesting anomalies from "big" data than from "small" data.




## Big Data
### 4. Veracity
- Measures the *quality* of the data.
- Considers accuracy, completeness, and currency of data.
- Determines if the data can be *trusted* for good decision-making.



## Big Data
### 5. Variety

<div style="text-align: center; width: 55%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/data-taxonomy.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"> </p>
</div>

   - Data comes in various formats.
   - **Structured data**: Has a predefined format, fits into traditional databases.
   - **Unstructured data**: Not organized in a predefined manner, comes from sources like documents, social media, emails, photos, videos, etc.



## Sources of an Organization's Data

<div style="text-align: center; width: 85%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/data-source.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"> </p>
</div>


## Free Sources of Useful (Big) Data
### Economics/Finance
<div style="font-size: 18px;">


| Data Source                        | Description                                                                                                                                  | URL                                                |
|------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
| Bureau of Labor Statistics (BLS)   | Provides access to data on inflation and prices, wages and benefits, employment, spending and time use, productivity, and workplace injuries | [BLS](https://www.bls.gov)                        |
| FRED (Federal Reserve Economic Data)| Provides access to a vast collection of U.S. economic data, including interest rates, GDP, inflation, employment, and more                   | [FRED](https://fred.stlouisfed.org)                |
| Yahoo Finance                      | Provides comprehensive financial news, data, and analysis, including stock quotes, market data, and financial reports                        | [Yahoo Finance](https://finance.yahoo.com)        |
| IMF (International Monetary Fund)  | Provides access to a range of economic data and reports on countries’ economies                                                              | [IMF Data](https://www.imf.org/en/Data)            |
| World Bank Open Data               | Free and open access to global development data, including world development indicators                                                      | [World Bank Open Data](https://data.worldbank.org) |
| OECD Data                          | Provides access to economic, environmental, and social data and indicators from OECD member countries                                        | [OECD Data](https://data.oecd.org)                 |
</div>


## Free Sources of Useful (Big) Data
### Government/Public Data
<div style="font-size: 18px;">

| Data Source                        | Description                                                                                                                                  | URL                                                |
|------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
| Data.gov                           | Portal providing access to over 186,000 government data sets, related to topics such as agriculture, education, health, and public safety    | [Data.gov](http://data.gov)                       |
| CIA World Factbook                 | Portal to information on the economy, government, history, infrastructure, military, and population of 267 countries                        | [CIA World Factbook](https://cia.gov/library/publications/the-world-factbook) |
| U.S. Census Bureau                 | Portal to a huge variety of government statistics and data relating to the U.S. economy and its population                                   | [U.S. Census Bureau](https://www.census.gov/data.html) |
| European Union Open Data Portal    | Provides access to public data from EU institutions                                                                                          | [EU Open Data Portal](https://data.europa.eu/euodp/en/data) |
| New York City Open Data            | Provides access to datasets from New York City, covering a wide range of topics such as public safety, transportation, and health            | [NYC Open Data](https://opendata.cityofnewyork.us)|
| Los Angeles Open Data              | Portal for accessing public data from the City of Los Angeles, including transportation, public safety, and city services                     | [LA Open Data](https://data.lacity.org)           |
| Chicago Data Portal                | Offers access to datasets from the City of Chicago, including crime data, transportation, and health statistics                              | [Chicago Data Portal](https://data.cityofchicago.org) |
</div>


## Free Sources of Useful (Big) Data
### Health, Climate/Environment, and Social Data
<div style="font-size: 18px;">

| Data Source                        | Description                                                                                                                                  | URL                                                |
|------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
| Healthdata.gov                     | Portal to 125 years of U.S. health care data, including national health care expenditures, claim-level Medicare data, and other topics       | [Healthdata.gov](https://www.healthdata.gov)      |
| World Health Organization (WHO)    | Portal to data and statistics on global health issues                                                                                        | [WHO Data](https://www.who.int/data)               |
| National Centers for Environmental Information (NOAA) | Portal for accessing a variety of climate and weather data sets                                                                              | [NCEI](https://www.ncdc.noaa.gov/data-access/quick-links#loc-clim) |
| NOAA National Weather Service      | Provides weather, water, and climate data, forecasts and warnings                                                                            | [NOAA NWS](https://www.weather.gov/data)           |
| FAO (Food and Agriculture Organization) | Provides access to data on food and agriculture, including data on production, trade, food security, and sustainability                       | [FAOSTAT](http://www.fao.org/faostat/en/#data)    |
| Pew Research Center Internet & Technology| Portal to research on U.S. politics, media and news, social trends, religion, Internet and technology, science, Hispanic, and global topics  | [Pew Research](https://www.pewresearch.org/internet/datasets/) |
| Data for Good from Facebook        | Provides access to anonymized data from Facebook to help non-profits and research communities with insights on crises, health, and well-being | [Facebook Data for Good](https://dataforgood.fb.com) |
| Data for Good from Canada          | Provides open access to datasets that address pressing social challenges across Canada                                                       | [Data for Good Canada](https://dataforgood.ca)     |

</div>



## Free Sources of Useful (Big) Data
### General Data Repositories

<div style="font-size: 18px;">


| Data Source                        | Description                                                                                                                                  | URL                                                |
|------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
| Amazon Web Services (AWS) public data sets | Portal to a huge repository of public data, including climate data, the million song dataset, and data from the 1000 Genomes project        | [AWS Datasets](http://aws.amazon.com/datasets)     |
| Gapminder                          | Portal to data from the World Health Organization and World Bank on economic, medical, and social issues                                     | [Gapminder](https://www.gapminder.org/data)       |
| Google Dataset Search              | Helps find datasets stored across the web                                                                                                    | [Google Dataset Search](https://datasetsearch.research.google.com) |
| Kaggle Datasets                    | A community-driven platform with datasets from various fields, useful for machine learning and data science projects                         | [Kaggle Datasets](https://www.kaggle.com/datasets) |
| UCI Machine Learning Repository    | A collection of databases, domain theories, and datasets used for machine learning research                                                  | [UCI ML Repository](https://archive.ics.uci.edu/ml/index.php) |
| United Nations Data                | Provides access to global statistical data compiled by the United Nations                                                                    | [UN Data](http://data.un.org)                      |
| Humanitarian Data Exchange (HDX)   | Provides humanitarian data from the United Nations, NGOs, and other organizations                                                            | [HDX](https://data.humdata.org)                    |
| Democratizing Data from data.org   | A platform providing access to high-impact datasets, tools, and resources aimed at solving critical global challenges                        | [Democratizing Data](https://data.org/democratizing-data) |
| Justia Federal District Court Opinions and Orders database | A free searchable database of full-text opinions and orders from civil cases heard in U.S. Federal District Courts                            | [Justia](http://law.justia.com/cases/federal/district-courts) |
</div>




# Hadoop {background-color="#1c4982"}


## Hadoop
### Introduction to Hadoop

<div style="text-align: center; width: 55%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/hadoop.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"> </p>
</div>

- **Definition**
  - An open-source software framework for storing and processing large data sets.
- **Components**
  - **Hadoop Distributed File System (HDFS):** Distributed data storage.
  - **MapReduce:** Data processing model.


## Hadoop
### Introduction to Hadoop

<div style="text-align: center; width: 55%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/hadoop.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"> </p>
</div>

- **Purpose**
  - Enables distributed processing of large data sets across clusters of computers.



## Hadoop
### Hadoop Architecture - HDFS
:::: {.columns}

::: {.column width="50%"}

<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/hadoop-env.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"> </p>
</div>
:::

::: {.column width="50%"}

- **HDFS**
  - Divides data into blocks and distributes them across different servers for processing.
  - Provides a highly redundant computing environment
    - Allows the application to keep running even if individual servers fail.


:::
::::


## Hadoop
### Hadoop Architecture - MapReduce

- **MapReduce**
  - **Map Phase:** Filters and sorts data.
    - e.g., Sorting customer orders based on their product IDs, with each group corresponding to a specific product ID.
  - **Reduce Phase:** Summarizes and aggregates results.
    - e.g., Counting the number of orders within each group, thereby determining the frequency of each product ID.
  



## Hadoop
### Hadoop Architecture - MapReduce


<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/map-reduce.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"> </p>
</div>

## Hadoop
### How Hadoop Works

1. **Data Distribution**
   - Large data sets are split into smaller blocks.
2. **Data Storage**
   - Blocks are stored across multiple servers in the cluster.
3. **Processing with MapReduce**
   - **Map Tasks:** Executed on servers where data resides, minimizing data movement.
   - **Reduce Tasks:** Combine results from map tasks to produce final output.
4. **Fault Tolerance**
   - Data replication ensures processing continues even if servers fail.


## Hadoop
### Extending Hadoop for Real-Time Processing

- **Limitation of Hadoop**
  - Hadoop is originally designed for batch processing.
    - **Batch Processing:** Data or tasks are collected over a period of time and then processed all at once, typically at scheduled times or during periods of low activity.
    - Results come after the entire dataset is analyzed.

- **Real-Time Processing Limitation:**
  - Hadoop cannot natively process real-time streaming data (e.g., stock prices flowing into stock exchanges, live sensor data)

- **Extending Hadoop's Capabilities**
  - Both Apache Storm and Apache Spark can run on top of Hadoop clusters, utilizing HDFS for storage.

## Hadoop
### Apache Storm and Apache Spark

:::: {.columns}
::: {.column width="50%"}

#### **Apache Storm**

- **Functionality:**
  - Processes real-time data streams.
  - Handles unbounded streams of data reliably and efficiently.
- **Use Cases:**
  - Real-time analytics
  - Online machine learning
  - Continuous computation
  - Real-time data integration

:::

::: {.column width="50%"}

#### **Apache Spark**

- **Functionality:**
  - Provides *in-memory computations* for increased speed.
  - Supports both batch and streaming data processing through Spark Streaming.
- **Use Cases:**
  - Interactive queries for quick, on-the-fly data analysis
  - Machine learning

:::
::::


## Apache Storm and Apache Spark
### Medscape: Real-Time Medical News for Healthcare Professionals

:::{.nonincremental}
- A medical news app for smartphones and tablets designed to keep healthcare professionals informed.
  - Provides up-to-date medical news and expert perspectives.

:::

:::: {.columns}
::: {.column width="50%"}
<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/mediscape.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"> </p>
</div>

:::

::: {.column width="50%"}

- **Real-Time Updates:** 
    - Uses Apache Storm to process about 500 million tweets per day.
    - Automatic Twitter feed integration helps users track important medical trends shared by physicians and medical commentators.

:::
::::



